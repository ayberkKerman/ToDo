{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.WSSecurity = void 0;\n\nvar crypto = require(\"crypto\");\n\nvar utils_1 = require(\"../utils\");\n\nvar validPasswordTypes = ['PasswordDigest', 'PasswordText'];\n\nvar WSSecurity =\n/** @class */\nfunction () {\n  function WSSecurity(username, password, options) {\n    options = options || {};\n    this._username = username;\n    this._password = password;\n    this._envelopeKey = 'soap'; // must account for backward compatibility for passwordType String param as well as object options defaults: passwordType = 'PasswordText', hasTimeStamp = true\n\n    if (typeof options === 'string') {\n      this._passwordType = options ? options : 'PasswordText';\n      options = {};\n    } else {\n      this._passwordType = options.passwordType ? options.passwordType : 'PasswordText';\n    }\n\n    if (validPasswordTypes.indexOf(this._passwordType) === -1) {\n      this._passwordType = 'PasswordText';\n    }\n\n    this._hasTimeStamp = options.hasTimeStamp || typeof options.hasTimeStamp === 'boolean' ? !!options.hasTimeStamp : true;\n    /*jshint eqnull:true */\n\n    if (options.hasNonce != null) {\n      this._hasNonce = !!options.hasNonce;\n    }\n\n    this._hasTokenCreated = options.hasTokenCreated || typeof options.hasTokenCreated === 'boolean' ? !!options.hasTokenCreated : true;\n\n    if (options.actor != null) {\n      this._actor = options.actor;\n    }\n\n    if (options.mustUnderstand != null) {\n      this._mustUnderstand = !!options.mustUnderstand;\n    }\n\n    if (options.envelopeKey) {\n      this._envelopeKey = options.envelopeKey;\n    }\n  }\n\n  WSSecurity.prototype.toXML = function () {\n    // avoid dependency on date formatting libraries\n    function getDate(d) {\n      function pad(n) {\n        return n < 10 ? '0' + n : n;\n      }\n\n      return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + 'Z';\n    }\n\n    var now = new Date();\n    var created = getDate(now);\n    var timeStampXml = '';\n\n    if (this._hasTimeStamp) {\n      var expires = getDate(new Date(now.getTime() + 1000 * 600));\n      timeStampXml = '<wsu:Timestamp wsu:Id=\"Timestamp-' + created + '\">' + '<wsu:Created>' + created + '</wsu:Created>' + '<wsu:Expires>' + expires + '</wsu:Expires>' + '</wsu:Timestamp>';\n    }\n\n    var password;\n    var nonce;\n\n    if (this._hasNonce || this._passwordType !== 'PasswordText') {\n      // nonce = base64 ( sha1 ( created + random ) )\n      var nHash = crypto.createHash('sha1');\n      nHash.update(created + Math.random());\n      nonce = nHash.digest('base64');\n    }\n\n    if (this._passwordType === 'PasswordText') {\n      password = '<wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">' + utils_1.xmlEscape(this._password) + '</wsse:Password>';\n\n      if (nonce) {\n        password += '<wsse:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">' + nonce + '</wsse:Nonce>';\n      }\n    } else {\n      /* Specific Testcase for passwordDigest calculation cover this code\n      /* istanbul ignore next */\n      password = '<wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest\">' + utils_1.passwordDigest(nonce, created, this._password) + '</wsse:Password>' + '<wsse:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">' + nonce + '</wsse:Nonce>';\n    }\n\n    return '<wsse:Security ' + (this._actor ? this._envelopeKey + \":actor=\\\"\" + this._actor + \"\\\" \" : '') + (this._mustUnderstand ? this._envelopeKey + \":mustUnderstand=\\\"1\\\" \" : '') + 'xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">' + timeStampXml + '<wsse:UsernameToken xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" wsu:Id=\"SecurityToken-' + created + '\">' + '<wsse:Username>' + utils_1.xmlEscape(this._username) + '</wsse:Username>' + password + (this._hasTokenCreated ? '<wsu:Created>' + created + '</wsu:Created>' : '') + '</wsse:UsernameToken>' + '</wsse:Security>';\n  };\n\n  return WSSecurity;\n}();\n\nexports.WSSecurity = WSSecurity;","map":{"version":3,"names":["exports","__esModule","WSSecurity","crypto","require","utils_1","validPasswordTypes","username","password","options","_username","_password","_envelopeKey","_passwordType","passwordType","indexOf","_hasTimeStamp","hasTimeStamp","hasNonce","_hasNonce","_hasTokenCreated","hasTokenCreated","actor","_actor","mustUnderstand","_mustUnderstand","envelopeKey","prototype","toXML","getDate","d","pad","n","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","now","Date","created","timeStampXml","expires","getTime","nonce","nHash","createHash","update","Math","random","digest","xmlEscape","passwordDigest"],"sources":["C:/Users/ayber/node_modules/soap/lib/security/WSSecurity.js"],"sourcesContent":["\"use strict\";\nexports.__esModule = true;\nexports.WSSecurity = void 0;\nvar crypto = require(\"crypto\");\nvar utils_1 = require(\"../utils\");\nvar validPasswordTypes = ['PasswordDigest', 'PasswordText'];\nvar WSSecurity = /** @class */ (function () {\n    function WSSecurity(username, password, options) {\n        options = options || {};\n        this._username = username;\n        this._password = password;\n        this._envelopeKey = 'soap';\n        // must account for backward compatibility for passwordType String param as well as object options defaults: passwordType = 'PasswordText', hasTimeStamp = true\n        if (typeof options === 'string') {\n            this._passwordType = options ? options : 'PasswordText';\n            options = {};\n        }\n        else {\n            this._passwordType = options.passwordType ? options.passwordType : 'PasswordText';\n        }\n        if (validPasswordTypes.indexOf(this._passwordType) === -1) {\n            this._passwordType = 'PasswordText';\n        }\n        this._hasTimeStamp = options.hasTimeStamp || typeof options.hasTimeStamp === 'boolean' ? !!options.hasTimeStamp : true;\n        /*jshint eqnull:true */\n        if (options.hasNonce != null) {\n            this._hasNonce = !!options.hasNonce;\n        }\n        this._hasTokenCreated = options.hasTokenCreated || typeof options.hasTokenCreated === 'boolean' ? !!options.hasTokenCreated : true;\n        if (options.actor != null) {\n            this._actor = options.actor;\n        }\n        if (options.mustUnderstand != null) {\n            this._mustUnderstand = !!options.mustUnderstand;\n        }\n        if (options.envelopeKey) {\n            this._envelopeKey = options.envelopeKey;\n        }\n    }\n    WSSecurity.prototype.toXML = function () {\n        // avoid dependency on date formatting libraries\n        function getDate(d) {\n            function pad(n) {\n                return n < 10 ? '0' + n : n;\n            }\n            return d.getUTCFullYear() + '-'\n                + pad(d.getUTCMonth() + 1) + '-'\n                + pad(d.getUTCDate()) + 'T'\n                + pad(d.getUTCHours()) + ':'\n                + pad(d.getUTCMinutes()) + ':'\n                + pad(d.getUTCSeconds()) + 'Z';\n        }\n        var now = new Date();\n        var created = getDate(now);\n        var timeStampXml = '';\n        if (this._hasTimeStamp) {\n            var expires = getDate(new Date(now.getTime() + (1000 * 600)));\n            timeStampXml = '<wsu:Timestamp wsu:Id=\"Timestamp-' + created + '\">' +\n                '<wsu:Created>' + created + '</wsu:Created>' +\n                '<wsu:Expires>' + expires + '</wsu:Expires>' +\n                '</wsu:Timestamp>';\n        }\n        var password;\n        var nonce;\n        if (this._hasNonce || this._passwordType !== 'PasswordText') {\n            // nonce = base64 ( sha1 ( created + random ) )\n            var nHash = crypto.createHash('sha1');\n            nHash.update(created + Math.random());\n            nonce = nHash.digest('base64');\n        }\n        if (this._passwordType === 'PasswordText') {\n            password = '<wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">' + utils_1.xmlEscape(this._password) + '</wsse:Password>';\n            if (nonce) {\n                password += '<wsse:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">' + nonce + '</wsse:Nonce>';\n            }\n        }\n        else {\n            /* Specific Testcase for passwordDigest calculation cover this code\n            /* istanbul ignore next */\n            password = '<wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest\">' + utils_1.passwordDigest(nonce, created, this._password) + '</wsse:Password>' +\n                '<wsse:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">' + nonce + '</wsse:Nonce>';\n        }\n        return '<wsse:Security ' + (this._actor ? this._envelopeKey + \":actor=\\\"\" + this._actor + \"\\\" \" : '') +\n            (this._mustUnderstand ? this._envelopeKey + \":mustUnderstand=\\\"1\\\" \" : '') +\n            'xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">' +\n            timeStampXml +\n            '<wsse:UsernameToken xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" wsu:Id=\"SecurityToken-' + created + '\">' +\n            '<wsse:Username>' + utils_1.xmlEscape(this._username) + '</wsse:Username>' +\n            password +\n            (this._hasTokenCreated ? '<wsu:Created>' + created + '</wsu:Created>' : '') +\n            '</wsse:UsernameToken>' +\n            '</wsse:Security>';\n    };\n    return WSSecurity;\n}());\nexports.WSSecurity = WSSecurity;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}